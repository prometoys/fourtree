<?php

// stgraph.png - Syntax tree image generator script
// Copyright (c) 2003-2004 Andre Eisenbach <andre@ironcreek.net>
//
// stgraph.png is part of phpSyntaxTree.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// $Id: stgraph.png,v 1.2 2005/06/02 21:03:58 int2str Exp $

chdir("../phpsyntaxtree_src");

require_once( "src/class.elementlist.php" );
require_once( "src/class.stringparser.php" );
require_once( "src/class.treegraph.php" );

// Start session to retrieve graph data
session_start();

define('EMPTY_STRING', '');

function foxy_utf8_to_nce(
  $utf = EMPTY_STRING
) {
  if($utf == EMPTY_STRING) return($utf);

  $max_count = 5; // flag-bits in $max_mark ( 1111 1000 == 5 times 1)
  $max_mark = 248; // marker for a (theoretical ;-)) 5-byte-char and mask for a 4-byte-char;

  $html = EMPTY_STRING;
  for($str_pos = 0; $str_pos < strlen($utf); $str_pos++) {
    $old_chr = $utf{$str_pos};
    $old_val = ord( $utf{$str_pos} );
    $new_val = 0;

    $utf8_marker = 0;

    // skip non-utf-8-chars
    if( $old_val > 127 ) {
      $mark = $max_mark;
      for($byte_ctr = $max_count; $byte_ctr > 2; $byte_ctr--) {
        // actual byte is utf-8-marker?
        if( ( $old_val & $mark  ) == ( ($mark << 1) & 255 ) ) {
          $utf8_marker = $byte_ctr - 1;
          break;
        }
        $mark = ($mark << 1) & 255;
      }
    }

    // marker found: collect following bytes
    if($utf8_marker > 1 and isset( $utf{$str_pos + 1} ) ) {
      $str_off = 0;
      $new_val = $old_val & (127 >> $utf8_marker);
      for($byte_ctr = $utf8_marker; $byte_ctr > 1; $byte_ctr--) {

        // check if following chars are UTF8 additional data blocks
        // UTF8 and ord() > 127
        if( (ord($utf{$str_pos + 1}) & 192) == 128 ) {
          $new_val = $new_val << 6;
          $str_off++;
          // no need for Addition, bitwise OR is sufficient
          // 63: more UTF8-bytes; 0011 1111
          $new_val = $new_val | ( ord( $utf{$str_pos + $str_off} ) & 63 );
        }
        // no UTF8, but ord() > 127
        // nevertheless convert first char to NCE
        else {
          $new_val = $old_val;
        }
      }
      // build NCE-Code
      $html .= '&#'.$new_val.';';
      // Skip additional UTF-8-Bytes
      $str_pos = $str_pos + $str_off;
    }
    else {
      $html .= chr($old_val);
      $new_val = $old_val;
    }
  }
  return($html);
}


// We force the web server (via .htaccess usually)
//   to treat this file as PHP. Now tell the user agent
//   that we are a PNG image...

if ( !isset( $_GET['debug'] ) )
    header("Content-type: image/png");

// Read session data

//if ( !isset( $_SESSION['syntaxtree_data'] ) )
//    exit;


$data = foxy_utf8_to_nce($_GET['syntaxTreeData']); //[NP Hallo][SP liebe Welt]";//$_SESSION['data'];

$color     = isset( $_SESSION['syntaxtree_color'] )     ? $_SESSION['syntaxtree_color']     : 1;
$triangles = isset( $_SESSION['syntaxtree_triangles'] ) ? $_SESSION['syntaxtree_triangles'] : FALSE;
$antialias = isset( $_SESSION['syntaxtree_antialias'] ) ? $_SESSION['syntaxtree_antialias'] : 1;
$autosub   = isset( $_SESSION['syntaxtree_autosub'] )   ? $_SESSION['syntaxtree_autosub']   : 0;
$font      = isset( $_SESSION['syntaxtree_font'] )      ? $_SESSION['syntaxtree_font']      : 'Vera.ttf';
$fontsize  = isset( $_SESSION['syntaxtree_fontsize'] )  ? $_SESSION['syntaxtree_fontsize']  : 8;

// Validate the phrase and draw the tree

$sp = new CStringParser( $data );

if (!$sp->Validate() )
{
    // Display an error if the phrase doesn't validate.
    //   Right now that only means the brackets didn't 
    //   match up. More tests could be added in the future.
    
    // It would also be a good idea to make this error
    //   image creation a standalone class or something.
    
    $im = imagecreate( 350, 20 );
    $col_bg = imagecolorallocate ($im, 255, 255, 255);
    $col_fg = imagecolorallocate ($im, 255, 0, 0);
    
    imagestring( $im, 3, 5, 3, "Sentence brackets don't match up...", $col_fg );
    imagepng( $im );
} else {
    // If all is well, go ahead and draw the graph ...
    
    $sp->Parse();
    
    if ( $autosub )
        $sp->AutoSubscript();
    
    $elist = $sp->GetElementList();
    
    // Draw the graph
    
    $fontpath = dirname( $_SERVER['SCRIPT_FILENAME'] ) . '/../phpsyntaxtree_src/ttf/';
	//die($fontpath);
    $graph = new CTreegraph( $elist
        , $color, $antialias, $triangles
        , $fontpath . $font, $fontsize );
    $graph->Draw();
}

?>
